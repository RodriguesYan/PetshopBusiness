Ta quase pronto a API
	

Tela de settings
	Talvez fazer um menuzinho lateral, para ver as orders do cara
	
	Landing
		Depois do carousel, fazer o esquema com as 3 imagens que baixei
		Depois dela, fazer um carouselzinho de produtos mais comprados
			Tem exemplo no https://azpetshop.com.br
			Royalpets.com.br
		Fazer area de ofertas
		Mais pra frente, fazer de categorias
		
		
	Fazer um esquema para, quando o token tiver expirado, redirecionar pra landing com o cara deslogado
	
	Updatar os dados do user
		Apagar o erro de login errado quando começar a digitar de novo
		
	Fazer processo de segurança de senha (qtd de caracteres, letra maiuscula, blablabla)
	
	Fazer esquema de cupom de desconto
	

3 -	8 digitos, caractere especial, numero, blablabla
4 - Fazer tela de VerifyCode
5 - 



Diiiica:
	No retorno 201, pode por a url usando Url.Action("nomeDoMetodo", new { id = id})
		Created(uri, objetoCriado
		Usar BadRequest se der errado
		NoContent() => Usar para remoção de objeto
		
	O icone do iis tem duas portas: https e http. Bom usar a http com o postman
	
	Ok(objeto) => retorna um objeto com status 200
	
	[HttpDelete("{id}")]
	
	Criar Alias para importar alguma classe
	using Lista = Alura.ListaLeitura.Modelos.ListaLeitura;
	
	Para retornar uma imagem no postman ou outro lugar
		 converter a imagem para bite[]
		 return File(imagem, "image/png")
		 
	 Vc pode solicitar no header o tipo de dados que vc quer da api
		bota na key Accept e no value o tipo que vc quer
		.net core tem que baixar nuget para retornar xml
		Microsoft.AspNetCore.Mvc.Formatters.Xml
		Ir no startup, em services, add no services.AddMvc() o seguinte:
			services.AddMvs.AddXmlSerializerFormatters();
			User dataAnotation [XmlType("Livro")] em cima da classe que vc quer mudar o nome no retorno
			
----------------------------------------------
Store token em cookie
	//FORMA DO ALURA
		/* No metodo que for fazer o login:
			List<Claim> claims = new List<Claim>
			{
				new Claim(ClaimTypes.Name, login.Login),
				new Claim("Token", result.Token)
			};
			ClaimsIdentity claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
			ClaimsPrincipal claimsPrincipal = new ClaimsPrincipal(claimsIdentity);
			await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);
		
			Por no startup =>
			services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
				.AddCookie(options => {
					options.LoginPath = "/Usuario/Login";
				});
		*/

		//Se usar o cookie, usar HttpContext.SignOutAsync para matar o cookie

		//Pegar o token do cookie
		//var token = HttpContext.User.Claims.First(c => c.Type == "Token").Value;